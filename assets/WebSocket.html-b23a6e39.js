import{_ as e,V as a,W as c,$ as o}from"./framework-c6791857.js";const t={},r=o(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><p>WebSocket 是一个持久化的协议, 通过 HTTP 协议进行升级, 升级完成后使用 WebSocket 而不是 HTTP 协议.<br> WebSocket 是基于 TCP 的, 全双工的协议, WebSocket 的客户端和服务端都可以主动向对方发起通信.</p><p>WebSocket 是 TCP 长连接通讯模式, 一旦 WebSocket 链接建立, 后续数据都以帧序列的形式传输. 在客户端断开 WebSocket 或者 Server 端中断连接前, 不需要任何一方重新发起请求.</p><h2 id="_2-go-使用-websocket" tabindex="-1"><a class="header-anchor" href="#_2-go-使用-websocket" aria-hidden="true">#</a> 2. GO 使用 WebSocket</h2><p>在 Go 中, 我们通常使用 <code>gorilla/websocket</code> 包来实现. 引入如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/gorilla/websocket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>gorilla/websocket</code> 提供了客户端和服务器的代码实现, 不过一般只需要实现客户端.</p>`,8),s=[r];function d(i,n){return a(),c("div",null,s)}const h=e(t,[["render",d],["__file","WebSocket.html.vue"]]);export{h as default};
