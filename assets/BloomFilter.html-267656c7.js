import{_ as t,V as p,W as l,X as s,Y as n,Z as o,$ as a,F as c}from"./framework-c6791857.js";const i={},u=a('<h1 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h1><blockquote><p>用于准确快速判断某个数据是否在大量数据集合中, 并且不占用内存.</p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h3><p>布隆过滤器是一种数据结构, 由一串很长的二进制向量组成(二进制数组), 初始默认值都为0, 可以将其看作一个容器.</p><h3 id="添加数据" tabindex="-1"><a class="header-anchor" href="#添加数据" aria-hidden="true">#</a> 添加数据</h3><p>要添加的元素为 key, 通过多个 hash 函数, 计算多个 key 对应的 hash 值, 以这个 hash 值作为 index, 将对应数组的 index 位置的元素置 1.</p><blockquote><p>注意数组从 0 开始计数.</p></blockquote><h3 id="判断数据是否存在" tabindex="-1"><a class="header-anchor" href="#判断数据是否存在" aria-hidden="true">#</a> 判断数据是否存在</h3><p>同样的, 将新数据通过之前定义的多个 hash 函数, 计算对应的 hash 值作为 index 值, 并在布隆过滤器中判断对应 index 的元素是否都为 1. <strong>如果不都为 1, 则该数据一定不存在.</strong><br><strong>由于不同数据的 hash 值可能相同, 如果对应 index 的元素都为 1, 不一定表示该数据存在.</strong></p><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><ul><li>优点: 使用二进制数组, 占用内存极少, 插入和查询速度都很快.</li><li>缺点: 随着数组增加, 误判率会增加; 无法判断数据是否一定存在; 无法删除数据.</li></ul><h3 id="参数设置" tabindex="-1"><a class="header-anchor" href="#参数设置" aria-hidden="true">#</a> 参数设置</h3><p>主要三个参数:</p><ol><li>哈希函数个数 k</li><li>布隆过滤器位数组容量 m</li><li>布隆过滤器插入数据数量 n</li></ol>',15),r=s("p",null,[n("最优准确性条件: "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"k"),s("mo",null,"="),s("mi",null,"l"),s("mi",null,"n"),s("mn",null,"2"),s("mo",null,"∗"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"n"),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"k = ln2 * (m / n)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord"},"/"),s("span",{class:"mord mathnormal"},"n"),s("span",{class:"mclose"},")")])])])],-1),d=a(`<h2 id="redis-实现布隆过滤器" tabindex="-1"><a class="header-anchor" href="#redis-实现布隆过滤器" aria-hidden="true">#</a> Redis 实现布隆过滤器</h2><blockquote><p>使用 spring-boot-starter-data-redis + LUA</p></blockquote><h3 id="下载布隆过滤器" tabindex="-1"><a class="header-anchor" href="#下载布隆过滤器" aria-hidden="true">#</a> 下载布隆过滤器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/RedisLabsModules/redisbloom.git
<span class="token builtin class-name">cd</span> redisbloom
<span class="token function">make</span> <span class="token comment"># 编译redisbloom</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),k={href:"http://redisbloom.so",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="启动-redis-服务器" tabindex="-1"><a class="header-anchor" href="#启动-redis-服务器" aria-hidden="true">#</a> 启动 Redis 服务器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./src/redis-server redis.conf <span class="token parameter variable">--loadmodule</span> ./src/modules/RedisBloom-master/redisbloom.so
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="lua-控制-bloomfilter" tabindex="-1"><a class="header-anchor" href="#lua-控制-bloomfilter" aria-hidden="true">#</a> LUA 控制 BloomFilter</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterHelper</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">BloomFilterHelper</span><span class="token punctuation">(</span><span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">addsLuaBloomFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> filterName<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> bloomAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomAdd<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-insert.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomAdd<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>bloomAdd<span class="token punctuation">,</span> values<span class="token punctuation">,</span> filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">existsLuaBloomFilter</span><span class="token punctuation">(</span><span class="token class-name">String</span> filterName<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> bloomExists<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomExists<span class="token punctuation">.</span><span class="token function">setScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceScriptSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;bloom-filter-exist.lua&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bloomExists<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keyList<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>filterName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        keyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>bloomExists<span class="token punctuation">,</span>keyList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LUA 脚本:</p><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 判断是否存在</span>
<span class="token keyword">local</span> bloomName <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> value <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token comment">-- BloomFilter</span>
<span class="token keyword">local</span> result_1 <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;BF.EXISTS&#39;</span><span class="token punctuation">,</span> bloomName<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token keyword">return</span> result_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-ext="lua"><pre class="language-lua"><code><span class="token comment">-- 添加元素</span>
<span class="token keyword">local</span> values <span class="token operator">=</span> KEYS
<span class="token keyword">local</span> bloomName <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token keyword">local</span> result_1
<span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span> <span class="token keyword">do</span>
 result_1 <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;BF.ADD&#39;</span><span class="token punctuation">,</span> bloomName<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token keyword">end</span>
<span class="token keyword">return</span> result_1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function h(v,b){const e=c("ExternalLinkIcon");return p(),l("div",null,[u,r,d,s("p",null,[n("编译正常执行完，会在根目录生成一个 "),s("a",k,[n("redisbloom.so"),o(e)]),n(" 文件")]),m])}const f=t(i,[["render",h],["__file","BloomFilter.html.vue"]]);export{f as default};
