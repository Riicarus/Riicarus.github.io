const e=JSON.parse('{"key":"v-7b4a8292","path":"/posts/ComputerScience/ComputerNetworking/WebSocket.html","title":"WebSocket","lang":"zh-CN","frontmatter":{"date":"2023-03-08T00:00:00.000Z","category":["计算机科学","计算机网络"],"tag":["计算机网络","WebSocket"],"description":"WebSocket 1. 概述 WebSocket 是一个持久化的协议, 通过 HTTP 协议进行升级, 升级完成后使用 WebSocket 而不是 HTTP 协议. WebSocket 是基于 TCP 的, 全双工的协议, WebSocket 的客户端和服务端都可以主动向对方发起通信. WebSocket 是 TCP 长连接通讯模式, 一旦 WebSocket 链接建立, 后续数据都以帧序列的形式传输. 在客户端断开 WebSocket 或者 Server 端中断连接前, 不需要任何一方重新发起请求. 2. GO 使用 WebSocket","head":[["meta",{"property":"og:url","content":"https://riicarus.github.io/posts/ComputerScience/ComputerNetworking/WebSocket.html"}],["meta",{"property":"og:site_name","content":"Riicarus"}],["meta",{"property":"og:title","content":"WebSocket"}],["meta",{"property":"og:description","content":"WebSocket 1. 概述 WebSocket 是一个持久化的协议, 通过 HTTP 协议进行升级, 升级完成后使用 WebSocket 而不是 HTTP 协议. WebSocket 是基于 TCP 的, 全双工的协议, WebSocket 的客户端和服务端都可以主动向对方发起通信. WebSocket 是 TCP 长连接通讯模式, 一旦 WebSocket 链接建立, 后续数据都以帧序列的形式传输. 在客户端断开 WebSocket 或者 Server 端中断连接前, 不需要任何一方重新发起请求. 2. GO 使用 WebSocket"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T08:13:26.000Z"}],["meta",{"property":"article:tag","content":"计算机网络"}],["meta",{"property":"article:tag","content":"WebSocket"}],["meta",{"property":"article:published_time","content":"2023-03-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-30T08:13:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSocket\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-30T08:13:26.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 概述","slug":"_1-概述","link":"#_1-概述","children":[]},{"level":2,"title":"2. GO 使用 WebSocket","slug":"_2-go-使用-websocket","link":"#_2-go-使用-websocket","children":[]}],"git":{"createdTime":1678108678000,"updatedTime":1680164006000,"contributors":[{"name":"Riicarus","email":"riicarus.acc@gmail.com","commits":3},{"name":"skyline-blue","email":"2895054643@qq.com","commits":1}]},"readingTime":{"minutes":0.75,"words":226},"filePathRelative":"posts/ComputerScience/ComputerNetworking/WebSocket.md","localizedDate":"2023年3月8日","excerpt":"<h1> WebSocket</h1>\\n<h2> 1. 概述</h2>\\n<p>WebSocket 是一个持久化的协议, 通过 HTTP 协议进行升级, 升级完成后使用 WebSocket 而不是 HTTP 协议.<br>\\nWebSocket 是基于 TCP 的, 全双工的协议, WebSocket 的客户端和服务端都可以主动向对方发起通信.</p>\\n<p>WebSocket 是 TCP 长连接通讯模式, 一旦 WebSocket 链接建立, 后续数据都以帧序列的形式传输. 在客户端断开 WebSocket 或者 Server 端中断连接前, 不需要任何一方重新发起请求.</p>\\n<h2> 2. GO 使用 WebSocket</h2>","autoDesc":true}');export{e as data};
