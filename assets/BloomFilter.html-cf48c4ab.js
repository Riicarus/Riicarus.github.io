const e=JSON.parse('{"key":"v-1f5e239a","path":"/posts/Middleware/Cache/BloomFilter.html","title":"布隆过滤器","lang":"zh-CN","frontmatter":{"date":"2023-01-10T00:00:00.000Z","category":["中间件","算法"],"tag":["Redis","布隆过滤器"],"description":"布隆过滤器 用于准确快速判断某个数据是否在大量数据集合中, 并且不占用内存. 简介 结构 布隆过滤器是一种数据结构, 由一串很长的二进制向量组成(二进制数组), 初始默认值都为0, 可以将其看作一个容器. 添加数据 要添加的元素为 key, 通过多个 hash 函数, 计算多个 key 对应的 hash 值, 以这个 hash 值作为 index, 将对应数组的 index 位置的元素置 1. 注意数组从 0 开始计数.","head":[["meta",{"property":"og:url","content":"https://riicarus.github.io/posts/Middleware/Cache/BloomFilter.html"}],["meta",{"property":"og:site_name","content":"Riicarus"}],["meta",{"property":"og:title","content":"布隆过滤器"}],["meta",{"property":"og:description","content":"布隆过滤器 用于准确快速判断某个数据是否在大量数据集合中, 并且不占用内存. 简介 结构 布隆过滤器是一种数据结构, 由一串很长的二进制向量组成(二进制数组), 初始默认值都为0, 可以将其看作一个容器. 添加数据 要添加的元素为 key, 通过多个 hash 函数, 计算多个 key 对应的 hash 值, 以这个 hash 值作为 index, 将对应数组的 index 位置的元素置 1. 注意数组从 0 开始计数."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-30T09:50:34.000Z"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"布隆过滤器"}],["meta",{"property":"article:published_time","content":"2023-01-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-30T09:50:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"布隆过滤器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-30T09:50:34.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"结构","slug":"结构","link":"#结构","children":[]},{"level":3,"title":"添加数据","slug":"添加数据","link":"#添加数据","children":[]},{"level":3,"title":"判断数据是否存在","slug":"判断数据是否存在","link":"#判断数据是否存在","children":[]},{"level":3,"title":"优缺点","slug":"优缺点","link":"#优缺点","children":[]},{"level":3,"title":"参数设置","slug":"参数设置","link":"#参数设置","children":[]}]},{"level":2,"title":"Redis 实现布隆过滤器","slug":"redis-实现布隆过滤器","link":"#redis-实现布隆过滤器","children":[{"level":3,"title":"下载布隆过滤器","slug":"下载布隆过滤器","link":"#下载布隆过滤器","children":[]},{"level":3,"title":"启动 Redis 服务器","slug":"启动-redis-服务器","link":"#启动-redis-服务器","children":[]},{"level":3,"title":"LUA 控制 BloomFilter","slug":"lua-控制-bloomfilter","link":"#lua-控制-bloomfilter","children":[]}]}],"git":{"createdTime":1678075657000,"updatedTime":1680169834000,"contributors":[{"name":"Riicarus","email":"riicarus.acc@gmail.com","commits":3},{"name":"skyline-blue","email":"2895054643@qq.com","commits":2}]},"readingTime":{"minutes":2.06,"words":618},"filePathRelative":"posts/Middleware/Cache/BloomFilter.md","localizedDate":"2023年1月10日","excerpt":"<h1> 布隆过滤器</h1>\\n<blockquote>\\n<p>用于准确快速判断某个数据是否在大量数据集合中, 并且不占用内存.</p>\\n</blockquote>\\n<h2> 简介</h2>\\n<h3> 结构</h3>\\n<p>布隆过滤器是一种数据结构, 由一串很长的二进制向量组成(二进制数组), 初始默认值都为0, 可以将其看作一个容器.</p>\\n<h3> 添加数据</h3>\\n<p>要添加的元素为 key, 通过多个 hash 函数, 计算多个 key 对应的 hash 值, 以这个 hash 值作为 index, 将对应数组的 index 位置的元素置 1.</p>\\n<blockquote>\\n<p>注意数组从 0 开始计数.</p>\\n</blockquote>","autoDesc":true}');export{e as data};
