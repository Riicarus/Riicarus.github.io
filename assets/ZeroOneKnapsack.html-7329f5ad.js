const e=JSON.parse('{"key":"v-dc133140","path":"/posts/Algorithm/Template/DynamicProgramming/KnapsackProblem/ZeroOneKnapsack.html","title":"01背包问题","lang":"zh-CN","frontmatter":{"date":"2023-08-10T00:00:00.000Z","category":["算法"],"tag":["算法模板","背包问题"],"description":"01背包问题 例题 01背包-acwing 01背包-acwing 动态规划--闫氏分析法 以例题为例: 状态表示: f(i, j) 集合: 所有只考虑前 i 个物品, 且总体积不超过 j 的选法的集合. 属性: Max/Min 状态计算: 划分: 将 f(i, j) 对应的选择方案进行划分, 做到不重复, 不遗漏. 计算状态: 根据划分选择最合适(根据属性要求)的方案作为最优选择, 计算 f(i, j) 对应的状态.","head":[["meta",{"property":"og:url","content":"https://riicarus.github.io/posts/Algorithm/Template/DynamicProgramming/KnapsackProblem/ZeroOneKnapsack.html"}],["meta",{"property":"og:site_name","content":"Riicarus"}],["meta",{"property":"og:title","content":"01背包问题"}],["meta",{"property":"og:description","content":"01背包问题 例题 01背包-acwing 01背包-acwing 动态规划--闫氏分析法 以例题为例: 状态表示: f(i, j) 集合: 所有只考虑前 i 个物品, 且总体积不超过 j 的选法的集合. 属性: Max/Min 状态计算: 划分: 将 f(i, j) 对应的选择方案进行划分, 做到不重复, 不遗漏. 计算状态: 根据划分选择最合适(根据属性要求)的方案作为最优选择, 计算 f(i, j) 对应的状态."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-12T09:37:20.000Z"}],["meta",{"property":"article:tag","content":"算法模板"}],["meta",{"property":"article:tag","content":"背包问题"}],["meta",{"property":"article:published_time","content":"2023-08-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-12T09:37:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01背包问题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-08-12T09:37:20.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"例题","slug":"例题","link":"#例题","children":[{"level":3,"title":"动态规划--闫氏分析法","slug":"动态规划-闫氏分析法","link":"#动态规划-闫氏分析法","children":[]}]}],"git":{"createdTime":1691833040000,"updatedTime":1691833040000,"contributors":[{"name":"Riicarus","email":"riicarus.acc@gmail.com","commits":1}]},"readingTime":{"minutes":2.48,"words":745},"filePathRelative":"posts/Algorithm/Template/DynamicProgramming/KnapsackProblem/ZeroOneKnapsack.md","localizedDate":"2023年8月10日","excerpt":"<h1> 01背包问题</h1>\\n<h2> 例题</h2>\\n<p><a href=\\"https://www.acwing.com/problem/content/2/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">01背包-acwing</a></p>\\n<figure><figcaption>01背包-acwing</figcaption></figure>\\n<h3> 动态规划--闫氏分析法</h3>\\n<p>以例题为例:</p>\\n<ol>\\n<li>状态表示: <code>f(i, j)</code>\\n<ol>\\n<li>集合: 所有只考虑前 <code>i</code> 个物品, 且总体积不超过 <code>j</code> 的选法的集合.</li>\\n<li>属性: Max/Min</li>\\n</ol>\\n</li>\\n<li>状态计算:\\n<ol>\\n<li>划分: 将 <code>f(i, j)</code> 对应的选择方案进行划分, 做到不重复, 不遗漏.</li>\\n<li>计算状态: 根据划分选择最合适(根据属性要求)的方案作为最优选择, 计算 <code>f(i, j)</code> 对应的状态.</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
